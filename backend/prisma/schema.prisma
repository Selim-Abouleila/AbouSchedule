generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  role       Role
  username   String?     @unique
  pushTokens PushToken[]
  tasks      Task[]
}

model Task {
  id              Int        @id @default(autoincrement())
  title           String
  priority        Priority
  status          Status     @default(PENDING)
  dueAt           DateTime?
  userId          Int?
  createdAt       DateTime   @default(now())
  description     String?
  /// NEW – optional recurrence rule
  recurrence      Recurrence @default(NONE)
  /// Optionally: stop repeating after this date
  recurrenceEnd   DateTime?
  /// If you need “every 2 weeks / every 3 months”, keep this too
  recurrenceEvery Int?
  /// NEW – optional time limit to finish the task (minutes)
  timeCapMinutes  Int?
  startedAt       DateTime?
  labelDone       Boolean?   @default(false) @map("label_done")
  isDone          Boolean    @default(false) @map("is_done")
  lastOccurrence  DateTime?
  previousStatus  Status?
  /// * NEW — for MONTHLY
  recurrenceDom   Int?
  /// * NEW — for WEEKLY
  recurrenceDow   Int?
  recurrenceMonth Int?
  nextOccurrence  DateTime?
  readAt          DateTime?  @map("read_at")
  /// Track if task has been read by the assigned user
  readByUser      Boolean?   @default(false) @map("read_by_user")
  wasAddedByAdmin Boolean?   @default(false) @map("was_added_by_admin")
  requiresCompletionApproval Boolean?   @default(false) @map("requires_completion_approval")
  runNotification Boolean?   @default(true) @map("run_notification")
  size            Size       @default(NORMAL)
  documents       Document[]
  images          Image[]
  videos          Video[]
  user            User?      @relation(fields: [userId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  taskId    Int
  url       String
  mime      String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Document {
  id        Int      @id @default(autoincrement())
  taskId    Int
  url       String
  mime      String
  fileName  String?
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Video {
  id        Int      @id @default(autoincrement())
  taskId    Int
  url       String
  mime      String
  fileName  String?
  duration  Int?     // Duration in seconds
  thumbnail String?  // URL to video thumbnail
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Settings {
  id               Int      @id @default(autoincrement())
  userId           Int?     @unique
  defaultLabelDone Boolean  @default(true) @map("default_label_done")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model PushToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum Priority {
  IMMEDIATE
  RECURRENT
  ONE
  TWO
  THREE
  NONE
}

enum Status {
  PENDING
  ACTIVE
  DONE
}

enum Size {
  SMALL
  NORMAL
  LARGE
}

enum Recurrence {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
